{"version":3,"sources":["routing/index.ts","init/client.ts","graphql/mutations/signIn.js","context/index.ts","pages/SignIn/SignIn.tsx","pages/SignIn/useSignIn.ts","hooks/useFormLogin.ts","graphql/query/getDashboard.js","utils/titleToRuDict.ts","components/Diagram/Diagram.tsx","assets/logout.svg","pages/Dashboard/Dashboard.tsx","pages/Dashboard/useDashboard.ts","routing/AppRouter.tsx","App.tsx","index.tsx"],"names":["ROUTES","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","SIGN_IN","gql","TokenContext","createContext","setToken","useTokenContext","useContext","SignIn","useState","error","setError","useMutation","onCompleted","login","setItem","onError","e","message","signInGQL","signIn","password","variables","username","loading","useSignIn","initialValues","form","setForm","handleChange","event","preventDefault","prevValues","target","name","value","useForm","email","className","onChange","type","placeholder","onClick","LOGIN","DASHBOARD","GET_DASHBOARD","titleToRuDict","dialogs","lists","scenarios","titleToRu","title","ChartJS","register","PieController","ArcElement","Title","Legend","Tooltip","Diagram","props","info","active","inactive","completed","selectStat","setSelectStat","styleTableItem","index","total","config","data","datasets","nameDiagram","backgroundColor","borderWidth","cutout","labels","options","plugins","legend","display","animation","animateRotate","tooltip","enabled","id","afterDraw","chart","ctx","chartArea","width","height","save","_active","length","_data","_index","_indexDataSet","datasetIndex","console","log","textLabel","numberLabel","font","fillStyle","textAlign","textBaseline","fillText","itemsTable","classItem","map","onMouseOver","onMouseOut","Dashboard","navigate","useNavigate","dashboard","setDashboard","useLazyQuery","getDashboardGQL","getDashboard","then","catch","useDashboard","useEffect","removeItem","src","LOGOUT_IMG","alt","Object","entries","AppRouter","path","element","to","replace","App","Provider","ApolloProvider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93414517.chunk.js","sourcesContent":["import React from 'react';\nimport Login from '../pages/SignIn/SignIn';\nimport Dashboard from '../pages/Dashboard/Dashboard';\n\nexport interface IRoute {\n  path: string;\n  component: React.ComponentType;\n}\n\nexport enum ROUTES {\n  LOGIN = '/login',\n  DASHBOARD = '/dashboard',\n}\n\nexport const publicRoutes: IRoute[] = [\n  { path: ROUTES.LOGIN, component: Login },\n];\n\nexport const privateRoutes: IRoute[] = [\n  { path: ROUTES.DASHBOARD, component: Dashboard },\n];\n","import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: 'https://gravitel-graphql-backend.herokuapp.com/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nexport const client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n","import { gql } from '@apollo/client';\n\nexport const SIGN_IN = gql`\n  mutation ($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n","import { createContext, useContext } from 'react';\n\nexport type TokenContextType = {\n  token: string | null;\n  setToken: (token: string | null) => void;\n};\n\nexport const TokenContext = createContext<TokenContextType>({\n  token: '',\n  setToken: () => {},\n});\n\nexport const useTokenContext = () => useContext(TokenContext);\n","import React, { MouseEventHandler } from 'react';\nimport { useSignIn } from './useSignIn';\nimport { useForm } from '../../hooks/useFormLogin';\nimport './SignIn.css';\n\nconst SignIn = () => {\n  const { signIn, loading, error } = useSignIn();\n  const {\n    form: { email, password },\n    handleChange,\n  } = useForm({ email: 'UserOne', password: 'pass' });\n\n  const login = () => {\n    signIn(email, password);\n  };\n\n  return (\n    <div className=\"signin__page\">\n      <div className=\"signin\">\n        <div className=\"signin__title\">Вход</div>\n        <div className=\"signin__text\">\n          Уникальная технология доступная для вашего бизнеса уже сейчас!\n        </div>\n        {loading && <div>Loading...</div>}\n        {error && <div className=\"signin__error\">{error}</div>}\n        <div className=\"signin__email signin__field\">\n          <input\n            name=\"email\"\n            value={email}\n            onChange={handleChange}\n            type=\"text\"\n            placeholder=\"Логин\"\n          />\n        </div>\n\n        <div className=\"signin__password signin__field\">\n          <input\n            name=\"password\"\n            value={password}\n            onChange={handleChange}\n            type=\"password\"\n            placeholder=\"Пароль\"\n          />\n        </div>\n\n        <button onClick={login} className=\"signin__submit\">\n          Войти\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;\n{\n  /* Login\n      <button onClick={login}>Auth</button>\n      {error && <div>{error}</div>}\n      {loading && <div>Loading...</div>} */\n}\n","import { useMutation } from '@apollo/client';\nimport { SIGN_IN } from '../../graphql/mutations/signIn';\nimport { useState } from 'react';\nimport { useTokenContext } from '../../context/index';\n\nexport const useSignIn = () => {\n  const { setToken } = useTokenContext();\n  const [error, setError] = useState('');\n\n  const [signInGQL, { loading }] = useMutation(SIGN_IN, {\n    onCompleted: ({ login }) => {\n      setToken(login?.token);\n      localStorage.setItem('token', login?.token);\n    },\n    onError: (e) => {\n      setError(e.message);\n    },\n  });\n\n  const signIn = (login: string, password: string) => {\n    signInGQL({\n      variables: {\n        username: login,\n        password: password,\n      },\n    });\n  };\n\n  return {\n    signIn,\n    loading,\n    error,\n  };\n};\n","import { ChangeEvent, ChangeEventHandler, useState } from 'react';\n\ntype FormLoginType = {\n  email: string;\n  password: string;\n};\n\nexport const useForm = (initialValues: FormLoginType) => {\n  const [form, setForm] = useState(initialValues);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    setForm((prevValues) => ({\n      ...prevValues,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n  return {\n    handleChange,\n    form,\n  };\n};\n","import { gql } from '@apollo/client';\n\nexport const GET_DASHBOARD = gql`\n  query {\n    dashboard {\n      scenarios {\n        active\n        inactive\n        completed\n      }\n      lists {\n        active\n        inactive\n        completed\n      }\n      dialogs {\n        active\n        inactive\n        completed\n      }\n    }\n  }\n`;\n","export type titleToRuDictType = {\n  dialogs: string;\n  lists: string;\n  scenarios: string;\n};\n\nexport const titleToRuDict: titleToRuDictType = {\n  dialogs: 'Диалоги',\n  lists: 'Списки',\n  scenarios: 'Сценарии',\n};\n\nexport const titleToRu = (title: string) => {\n  return titleToRuDict[title as keyof titleToRuDictType];\n};\n","import React, { useCallback, useState } from 'react';\nimport './Diagram.css';\nimport { titleToRu } from '../../utils/titleToRuDict';\nimport { Doughnut } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  PieController,\n  ArcElement,\n  Legend,\n  Tooltip,\n  Title,\n} from 'chart.js';\nChartJS.register(PieController, ArcElement, Title, Legend, Tooltip);\n\nexport type DiagramInfoType = {\n  active: number;\n  inactive: number;\n  completed: number;\n};\n\nexport type DiagramType = {\n  title: string;\n  info: DiagramInfoType;\n};\n\nconst Diagram = (props: DiagramType) => {\n  const { title, info } = props;\n  const { active, inactive, completed } = info;\n\n  const [selectStat, setSelectStat] = useState<number | null>();\n\n  const styleTableItem = (index: number) =>\n    'diagram__item' + (index === selectStat ? ' diagram__item--active' : '');\n\n  const total = active + inactive + completed;\n\n  const hoverlabel = {\n    id: 'hoverlabel',\n    afterDraw: (chart: any) => {\n      const {\n        ctx,\n        chartArea: { width, height },\n      } = chart;\n      ctx.save();\n\n\n      if (chart._active?.length > 0) {\n        //shorts\n        const _data = chart.config.data;\n        const _index = chart._active[0].index;\n        const _indexDataSet = chart._active[0].datasetIndex;\n        console.log('_index', _index);\n\n        //params\n        const textLabel = titleToRu(title);\n        const numberLabel = _data.datasets[_indexDataSet].data[_index];\n        const colorLabel = '#FF982B';\n\n        //Text label\n        ctx.font = 'normal 18px Arial';\n        ctx.fillStyle = '#000';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'center';\n        ctx.fillText(textLabel, width / 2, height / 2 - 15);\n\n        //Number\n        ctx.font = 'normal 45px Arial';\n        ctx.fillStyle = colorLabel;\n        ctx.fillText(numberLabel, width / 2, height / 2 + 35);\n      } else {\n        //params\n        const textLabel = titleToRu(title);\n        const numberLabel = total;\n        const colorLabel = '#FF982B';\n\n        //Text label\n        ctx.font = 'normal 18px Arial';\n        ctx.fillStyle = '#000';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'center';\n        ctx.fillText(textLabel, width / 2, height / 2 - 15);\n\n        //Number\n        ctx.font = 'normal 45px Arial';\n        ctx.fillStyle = colorLabel;\n        ctx.fillText(numberLabel, width / 2, height / 2 + 35);\n      }\n    },\n  };\n\n  const dataChart = {\n    datasets: [\n      {\n        data: [active, inactive, completed],\n        nameDiagram: title,\n        backgroundColor: ['#F9A752', '#FCCF82', '#F2F0F5'],\n        borderWidth: 3,\n        cutout: '85%',\n      },\n    ],\n    labels: ['Активные', 'Неактивные', 'Завершенные'],\n  };\n\n  const optionsChart = {\n    plugins: {\n      legend: {\n        display: false,\n      },\n      animation: {\n        animateRotate: true,\n      },\n      tooltip: {\n        enabled: false,\n      },\n    },\n  };\n\n  const config = {\n    data: dataChart,\n    options: optionsChart,\n    plugins: [hoverlabel],\n  };\n\n  const itemsTable = [\n    { title: 'Активных:', value: active, classItem: 'diagram__active' },\n    { title: 'Неактивных:', value: inactive, classItem: 'diagram__inactive' },\n    {\n      title: 'Завершенных:',\n      value: completed,\n      classItem: 'diagram__completed',\n    },\n  ];\n\n  return (\n    <div className=\"diagram__wrap\">\n      <div className=\"diagram\">\n        <Doughnut {...config} />\n      </div>\n      <div className=\"diagram__table\">\n        <div className={'diagram__total diagram__item'}>\n          <div className=\"diagram__item-text\">Всего:</div>\n          <div>{total}</div>\n        </div>\n        {itemsTable.map(({ title, value, classItem }, index) => (\n          <div\n            className={styleTableItem(index)}\n            onMouseOver={() => setSelectStat(index)}\n            onMouseOut={() => setSelectStat(null)}\n          >\n            <div className=\"diagram__item-text\">{title}</div>\n            <div>{value}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Diagram;\n","export default __webpack_public_path__ + \"static/media/logout.09aec618.svg\";","import { Link } from 'react-router-dom';\nimport React, { useContext, useState } from 'react';\nimport { ROUTES } from '../../routing';\nimport { useNavigate } from 'react-router-dom';\nimport { TokenContext } from '../../context/index';\nimport { useTokenContext } from '../../context/index';\nimport { useDashboard } from './useDashboard';\nimport { useEffect } from 'react';\nimport { OperationVariables, useQuery } from 'react-apollo';\nimport { GET_DASHBOARD } from '../../graphql/query/getDashboard';\nimport { useLazyQuery } from '@apollo/client';\nimport './Dashboard.css';\nimport Diagram from '../../components/Diagram/Diagram';\nimport { DiagramInfoType } from '../../components/Diagram/Diagram';\n// import { Chart } from 'chart.js';\nimport LOGOUT_IMG from '../../assets/logout.svg';\n\nconst Dashboard = () => {\n  const navigate = useNavigate();\n\n  const { token, setToken } = useTokenContext();\n\n  const { dashboard, error, getDashboard, loading } = useDashboard();\n  const Logout = () => {\n    setToken('');\n    localStorage.removeItem('token');\n    navigate(ROUTES.LOGIN);\n  };\n\n  useEffect(() => {\n    getDashboard();\n  }, []);\n\n  if (error) {\n    return <div>error - {error}</div>;\n  }\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"dashboard__page\">\n      <div className=\"container\">\n        <div className=\"dashboard__nav\">\n          <div className=\"dashboard__title\">Сводка</div>\n          <div className=\"dashboard__logout\" onClick={Logout}>\n            <img src={LOGOUT_IMG} alt=\"logout-img\" />\n          </div>\n        </div>\n        <div className=\"dashboard\">\n          {dashboard &&\n            Object.entries(dashboard).map(([title, info]) => (\n              <Diagram title={title} info={info as DiagramInfoType} />\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","import { useLazyQuery } from '@apollo/client';\nimport { useState } from 'react';\nimport { GET_DASHBOARD } from '../../graphql/query/getDashboard';\nimport { DiagramInfoType } from '../../components/Diagram/Diagram';\n\nexport type GetDashboardType = {\n  dialogs: DiagramInfoType;\n  lists: DiagramInfoType;\n  scenarios: DiagramInfoType;\n};\n\nexport type GetDashboardDataType = {\n  dashboard: GetDashboardType;\n};\n\nexport const useDashboard = () => {\n  const [dashboard, setDashboard] = useState({});\n  const [error, setError] = useState('');\n  const [getDashboardGQL, { data: dashboardData, loading }] = useLazyQuery(\n    GET_DASHBOARD,\n    {\n      // onCompleted: ({ dataDashboard }) => {\n      //   const { dialogs, lists, scenarios } = dashboardData?.dashboard;\n      //   const diagramList = { scenarios, lists, dialogs };\n      //   setDashboard(diagramList);\n      // },\n      // onError: (e) => {\n      //   setError(e.message);\n      // },\n    }\n  );\n\n  const getDashboard = () => {\n    getDashboardGQL()\n      .then(({ data }) => {\n        const { dialogs, lists, scenarios } = data.dashboard;\n        const diagramList: GetDashboardType = { scenarios, lists, dialogs };\n        setDashboard(diagramList);\n      })\n      .catch((e) => {\n        setError(e.message);\n      });\n  };\n\n  return {\n    getDashboard,\n    dashboard,\n    loading,\n    error,\n  };\n};\n","import React, { useEffect } from 'react';\nimport { Navigate, Route, Routes, useNavigate } from 'react-router-dom';\nimport Login from '../pages/SignIn/SignIn';\nimport Dashboard from '../pages/Dashboard/Dashboard';\nimport { ROUTES } from './index';\nimport { useTokenContext } from '../context';\n\nconst AppRouter = () => {\n  const { token } = useTokenContext();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (token) {\n      navigate(ROUTES.DASHBOARD);\n    } else {\n      navigate(ROUTES.LOGIN);\n    }\n  }, [token]);\n\n  return (\n    <div className=\"App\">\n      {token ? (\n        <Routes>\n          <Route path={ROUTES.DASHBOARD} element={<Dashboard />} />\n          <Route\n            path=\"*\"\n            element={<Navigate to={ROUTES.DASHBOARD} replace />}\n          />\n        </Routes>\n      ) : (\n        <Routes>\n          <Route path={ROUTES.LOGIN} element={<Login />} />\n          <Route path=\"*\" element={<Navigate to={ROUTES.LOGIN} replace />} />\n        </Routes>\n      )}\n    </div>\n  );\n};\n\nexport default AppRouter;\n","import React, { useState } from 'react';\nimport { ApolloProvider } from '@apollo/client';\nimport './App.css';\nimport { client } from './init/client';\nimport AppRouter from './routing/AppRouter';\nimport { TokenContext } from './context';\nimport { HashRouter } from 'react-router-dom';\n\nconst App = () => {\n  const [token, setToken] = useState<string | null>(\n    localStorage.getItem('token')\n  );\n\n  return (\n    <TokenContext.Provider value={{ token, setToken }}>\n      <ApolloProvider client={client}>\n        <HashRouter>\n          <div className=\"App\">\n            <AppRouter />\n          </div>\n        </HashRouter>\n      </ApolloProvider>\n    </TokenContext.Provider>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}